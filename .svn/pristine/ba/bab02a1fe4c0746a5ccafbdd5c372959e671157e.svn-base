package com.littlecloud.services;

import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;

import org.jboss.logging.Logger;

import com.littlecloud.control.dao.CaptivePortalDailyUsagesDAO;
import com.littlecloud.control.dao.criteria.CaptivePortalDailyUsagesCriteria;
import com.littlecloud.control.entity.CaptivePortalDailyUsage;
import com.littlecloud.control.entity.Networks;
import com.littlecloud.helpers.CaptivePortalDailyUsagesHelper;
import com.littlecloud.utils.CalendarUtils;

public class CaptivePortalDailyUsagesMgr {
	private static final Logger log = Logger.getLogger(CaptivePortalDailyUsagesMgr.class);
	private CaptivePortalDailyUsagesDAO cpDailyUsageReportsDao;
	private String orgId;
	public CaptivePortalDailyUsagesMgr(String orgId){
		this.orgId = orgId;
		init();
	}
	public void init(){
		try{
			cpDailyUsageReportsDao = new CaptivePortalDailyUsagesDAO(orgId);
		} catch (Exception e){
			log.error("CAPPORTRPT20141014 - CaptivePortalDailyUsageReportsMgr.init()", e);
		}
	}
	
	public boolean doCaptivePortalDailyUsageConsolidation(String orgId, Networks network, Calendar utcConsolidateFrom, Calendar utcConsolidateTo){
		boolean isConsolidated = false;
		try{
			if (network == null || orgId == null || orgId.isEmpty()){
				log.warnf("CAPPORTRPT20141014 - CaptivePortalDailyUsageReportsMgr.doCaptivePortalDailyUsageConsolidation(), orgId is empty or network or utcConsolidateFrom or utcConsolidateTo is null, orgId: %s, network:%s, utcConsolidateFrom: %s, utcConsolidateTo: %s", orgId, network, utcConsolidateFrom, utcConsolidateTo );
				return false;
			}
			List<CaptivePortalDailyUsage> newGenCaptivePortalDailyUsageReportList = generateCaptivePortalDailyUsageReportListByCalendar(orgId, network.getId(), utcConsolidateFrom, utcConsolidateTo);
			CaptivePortalDailyUsagesHelper cpDailyUsageReportsHelper = new CaptivePortalDailyUsagesHelper();
			TimeZone tz = CalendarUtils.getTimeZoneFromNetwork(network);

			if (newGenCaptivePortalDailyUsageReportList != null && newGenCaptivePortalDailyUsageReportList.size() > 0){
				for (CaptivePortalDailyUsage cpDailyUsageReport: newGenCaptivePortalDailyUsageReportList){
					cpDailyUsageReportsHelper.addOrUpdateCalculateFields(cpDailyUsageReport);
				}
				if (tz != null){
					List<CaptivePortalDailyUsage> computedCpDailyUsageReportList = cpDailyUsageReportsHelper.getElementList();
					paddingId2CaptivePortalDailyUsageReportListIfRecordExists(computedCpDailyUsageReportList, utcConsolidateFrom, tz);
					isConsolidated = saveCaptivePortalDailyUsageReportList(computedCpDailyUsageReportList);
				} else {
					log.warnf("CAPPORTRPT20141014 - CaptivePortalDailyUsageReportsMgr.doCaptivePortalDailyUsageConsolidation(), timezone is null, orgId: %s, networkId:%s", orgId, network.getId());
				}
			} else {
				CaptivePortalDailyUsage captivePortalDailyUsageReport = new CaptivePortalDailyUsage();
				captivePortalDailyUsageReport.setBandwidthUsed(new BigDecimal(-1));
				captivePortalDailyUsageReport.setCpId(-1);
				captivePortalDailyUsageReport.setReportDate(utcConsolidateFrom.getTime());
				captivePortalDailyUsageReport.setSessionCount(-1);
				captivePortalDailyUsageReport.setTimeUsed(new BigDecimal(-1));
				Integer unixtime = CalendarUtils.changeDate2Unixtime(utcConsolidateFrom.getTime());
				captivePortalDailyUsageReport.setUnixtime(unixtime);
				captivePortalDailyUsageReport.setStatus(false);
				newGenCaptivePortalDailyUsageReportList.add(captivePortalDailyUsageReport);
				paddingId2CaptivePortalDailyUsageReportListIfRecordExists(newGenCaptivePortalDailyUsageReportList, utcConsolidateFrom, tz);
				isConsolidated = saveCaptivePortalDailyUsageReportList(newGenCaptivePortalDailyUsageReportList);
				if (log.isDebugEnabled()){
					log.debugf("CAPPORTRPT20141014 - CaptivePortalDailyUsageReportsMgr.doCaptivePortalDailyUsageConsolidation(), newGenCaptivePortalDailyUsageReportList - no record: %s", newGenCaptivePortalDailyUsageReportList);
				}
			}
			
		} catch (Exception e){
			log.error("CAPPORTRPT20141014 - CaptivePortalDailyUsageReportsMgr.doCaptivePortalDailyUsageConsolidation()", e);
		}
		return isConsolidated;
	}
	private void paddingId2CaptivePortalDailyUsageReportListIfRecordExists(List<CaptivePortalDailyUsage> captivePortalDailyUsageReportList, Calendar reportDate, TimeZone tz){
		try{
			for (CaptivePortalDailyUsage cpDailyUsageReport: captivePortalDailyUsageReportList){
				if (cpDailyUsageReport.getReportDate() != null && cpDailyUsageReport.getCpId() != null){
					CaptivePortalDailyUsage tmpCpDailyUsageReport = getCaptivePortalDailyUsageReportByDateAndCpId(cpDailyUsageReport.getReportDate(), cpDailyUsageReport.getCpId());
					if (tmpCpDailyUsageReport != null && tmpCpDailyUsageReport.getReportDate() != null){
						Calendar calReportDate = Calendar.getInstance();
						calReportDate.setTime(cpDailyUsageReport.getReportDate());
						calReportDate.setTimeZone(tz);
						CalendarUtils.recomputeCalendar(calReportDate);
						
						Calendar calTmpReportDate = Calendar.getInstance();
						calTmpReportDate.setTimeZone(tz);
						calTmpReportDate.setTime(tmpCpDailyUsageReport.getReportDate());
						if (log.isDebugEnabled()){
							log.debugf("CAPPORTRPT20141014 - CaptivePortalDailyUsageReportsMgr.paddingId2CaptivePortalDailyUsageReportListIfRecordExists(), before recompute: %s",calTmpReportDate);
						}
						CalendarUtils.recomputeCalendar(calTmpReportDate);
						if (log.isDebugEnabled()){
							log.debugf("CAPPORTRPT20141014 - CaptivePortalDailyUsageReportsMgr.paddingId2CaptivePortalDailyUsageReportListIfRecordExists(), after recompute: %s",calTmpReportDate);
						}
						
						
						boolean isTheSameDate = isReportTheSameDate(calReportDate, calTmpReportDate);
						if (isTheSameDate){
							if (cpDailyUsageReport.getCpId().intValue() == tmpCpDailyUsageReport.getCpId().intValue()){
								cpDailyUsageReport.setId(tmpCpDailyUsageReport.getId());
							}
						}
//						cpDailyUsageReport.setReportDate(reportDate.getTime());
//						Integer unixtime = CalendarUtils.changeDate2Unixtime(reportDate.getTime());
//						cpDailyUsageReport.setUnixtime(unixtime);
					}
				}
			}
		} catch (Exception e){
			log.error("CAPPORTRPT20141014 - CaptivePortalDailyUsageReportsMgr.paddingId2CaptivePortalDailyUsageReportListIfRecordExists()", e);
		}
	}
	
	private boolean isReportTheSameDate(Calendar calA, Calendar calB){
		boolean isTheSame = false;
		if (log.isDebugEnabled()){
			log.debugf("CAPPORTRPT20141014 - CaptivePortalDailyUsageReportsMgr.isReportTheSameDate(), calA:%s vs calB: %s",calA ,calB);
		}
		
		if (calA.get(Calendar.YEAR) == calB.get(Calendar.YEAR) &&
			calA.get(Calendar.MONTH) == calB.get(Calendar.MONTH) &&
			calA.get(Calendar.DATE) == calB.get(Calendar.DATE)){
			isTheSame = true;
		}
		
		return isTheSame;
	}
	
	private List<CaptivePortalDailyUsage> generateCaptivePortalDailyUsageReportListByCalendar(String orgId, Integer networkId, Calendar calFrom, Calendar calTo){
		List <CaptivePortalDailyUsage> captivePortalDailyUsageReportList = null;
		try{
			CaptivePortalActivitiesMgr captivePortalActivitiesMgr = new CaptivePortalActivitiesMgr(orgId);
			captivePortalDailyUsageReportList = captivePortalActivitiesMgr.generateCaptivePortalDailyUsageReportsList(networkId, calFrom, calTo);
		} catch (Exception e){
			log.error("CAPPORTRPT20141014 - CaptivePortalDailyUsageReportsMgr.generateCaptivePortalDailyUsageReportListByDate()", e);
		}
		return captivePortalDailyUsageReportList;
	}
	public boolean saveCaptivePortalDailyUsageReportList(List<CaptivePortalDailyUsage> captivePortalDailyUsageReportList){
		boolean isSave = false;
		try{
			isSave = cpDailyUsageReportsDao.saveCaptivePortalDailyUsageReportList(captivePortalDailyUsageReportList);
		} catch (Exception e){
			log.error("CAPPORTRPT20141014 - CaptivePortalDailyUsageReportsMgr.saveCaptivePortalDailyUsageReportList()", e);
		}
		return isSave;
	}
	
	// get exactly the report date
	public CaptivePortalDailyUsage getCaptivePortalDailyUsageReportByDateAndCpId(Date reportDate, Integer cpId){
		CaptivePortalDailyUsage captivePortalDailyUsageReportRtn = null;
		try{
			Date from = CalendarUtils.trimDate2Minimum(reportDate);
			Date to = CalendarUtils.trimDate2Maximum(reportDate);
			List <CaptivePortalDailyUsage> captivePortalDailyUsageReportList = 
					getCaptivePortalDailyUsageReportListByDateAndCpId(from,to, cpId);
			if (captivePortalDailyUsageReportList != null && captivePortalDailyUsageReportList.size() > 0){
				if (captivePortalDailyUsageReportList.size() > 1) {
					log.warnf("CAPPORTRPT20141014 - CaptivePortalDailyUsageReportsMgr.getCaptivePortalDailyUsageReportByDateAndCpId(), captivePortalDailyUsageReportList.size() > 1, %s", captivePortalDailyUsageReportList);
				}
				captivePortalDailyUsageReportRtn = captivePortalDailyUsageReportList.get(0);
			}
		} catch (Exception e){
			log.error("CAPPORTRPT20141014 - CaptivePortalDailyUsageReportsMgr.getCaptivePortalDailyUsageReportByDate()", e);
		}
		return captivePortalDailyUsageReportRtn;
	}
	
	public List<CaptivePortalDailyUsage> getCaptivePortalDailyUsageReportListByDateAndCpId(Date dateFrom, Date dateTo, Integer cpId){
		List <CaptivePortalDailyUsage> captivePortalDailyUsageReportList = null;
		try{
			CaptivePortalDailyUsagesCriteria criteria = new CaptivePortalDailyUsagesCriteria();
			criteria.setReportDateFrom(dateFrom);
			criteria.setReportDateTo(dateTo);
			criteria.setCpId(cpId);
			captivePortalDailyUsageReportList = cpDailyUsageReportsDao.getCaptivePortalDailyUsageReport(criteria);
			
		} catch (Exception e){
			log.error("CAPPORTRPT20141014 - CaptivePortalDailyUsageReportsMgr.getCaptivePortalDailyUsageReport()", e);
		}
		return captivePortalDailyUsageReportList;
	}
	
	
}
